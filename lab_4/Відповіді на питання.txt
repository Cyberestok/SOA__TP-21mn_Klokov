1. ПРИНЦИПИ І ПРОТОКОЛИ КОМУНІКАЦІЇ МІЖ СЕРВІСАМИ.
	Існує дві основні форми зв’язку мікросервісів: синхронна та асинхронна. У синхронному зв’язку виклики створюють ланцюжок залежностей через усі нижчі служби. Наприклад, служба, яка здійснює синхронний виклик до кошика для покупок, також може виявитися залежною від пов’язаних платіжних і складських служб.
	Якщо одна або кілька із цих низхідних служб недоступні, малоймовірно, що абонент отримає відповідь. Навіть якщо буде відповідь, це може зайняти стільки часу, що користувач завершить сеанс. Спосіб вирішення цієї проблеми полягає у використанні асинхронних комунікацій.
	Замість того, щоб будувати безперервний ланцюжок залежностей, асинхронний підхід обробляє кожну комунікацію окремо. Це дозволяє кожній мікрослужбі працювати незалежно та реагувати на виклики, не чекаючи відповіді від нижчестоящих служб.
	HTTP — це звичайний протокол зв’язку між мікросервісами, який найчастіше використовується для синхронного зв’язку. Його підхід без брокерів сприяє прямій взаємодії між усіма мікросервісами. Хоча HTTP забезпечує простий зв’язок, він може легко викликати небажані залежності.
	Рекомендується використовувати HTTP лише як основний протокол між інтерфейсом користувача та службами найвищого рівня. Однак впровадження REST у HTTP може допомогти асинхронно обробляти зв’язок запитів/відповідей. Якщо вам потрібно використовувати HTTP, подумайте також про використання REST, оскільки між ними існує значна стандартизація.
	Головною перевагою використання комбінованих протоколів є швидший час відповіді. Для тих, хто вирішив дотримуватися асинхронних протоколів, варто розглянути розширений протокол черги повідомлень ( AMQP ). Цей широкодоступний і зрілий протокол забезпечує стандартний метод для зв’язку мікросервісів і має бути пріоритетом для тих, хто розробляє справді складні програми мікросервісів.
	Асинхронні протоколи, такі як AMQP, використовують спрощену службову шину, подібну до шини сервісно-орієнтованої архітектури (SOA), але набагато менш складну. На відміну від HTTP, ця шина забезпечує брокера повідомлень, який діє як посередник між окремими мікросервісами, таким чином уникаючи проблем, пов’язаних із підходом без брокера.
	Однак майте на увазі, що брокер повідомлень запровадить додаткові кроки, які можуть додати затримку. Окремі служби все ще містять свою функціональну та операційну логіку, і для обробки цієї логіки потрібен час. Автобус просто допомагає стандартизувати та гальмувати ці комунікації.

2. ЯКИМ ЧИНОМ СЕРВІСИ ЗНАХОДЯТЬ ЕКЗЕМПЛЯРИ ОДИН ОДНОГО?
	Під час використання виявлення на стороні клієнта клієнт несе відповідальність за визначення мережевого розташування доступних екземплярів служби та запитів балансування навантаження між ними. Клієнт запитує реєстр служб, який є базою даних доступних екземплярів служб. Потім клієнт використовує алгоритм балансування навантаження, щоб вибрати один із доступних екземплярів служби та зробити запит.
	Розташування екземпляра служби в мережі реєструється в реєстрі служби під час її запуску. Його видаляють із реєстру служби, коли примірник завершує роботу. Реєстрація екземпляра служби зазвичай періодично оновлюється за допомогою механізму пульсу.
	У разі використання шаблону виявлення на стороні сервера клієнт робить запит до служби через балансувальник навантаження. Балансувальник навантаження запитує реєстр служби та направляє кожен запит до доступного екземпляра служби. Як і у випадку виявлення на стороні клієнта, екземпляри служби реєструються та скасовуються в реєстрі послуг.

3. МЕХАНІЗМ ВІДСЛІДКОВУВАННЯ ТАЙМ-АУТУ ПРИ ЛАНЦЮЖКОВОМУ (ПОСЛІДОВНОМУ) ВИКЛИКУ МІКРОСЕРВІСІВ.
	Шаблон тайм-ауту досить простий, і багато HTTP-клієнтів мають стандартний тайм-аут. Мета полягає в тому, щоб уникнути необмеженого часу очікування відповідей і таким чином розглядати кожен запит як невдалий, якщо відповідь не була отримана протягом часу очікування.
	Автоматичні вимикачі є корисним інструментом, особливо в поєднанні з повторними спробами, тайм-аутами та резервними варіантами. Резервні блоки можна використовувати не тільки в разі збоїв, але і якщо ланцюг розімкнений.
	За наявності ланцюжка викликів встановити розумні тайм-аути складно. Поточна практика для мікросервісів: короткі тайм-аути, повторні спроби (за наявності ідемпотентних викликів), агресивний перезапуск нестабільних/повільних служб (необхідність діалогу з моніторингом, маршрутизацією повідомлень і службами інфраструктури хостингу).
	Тривалість тайм-аутів, кількість і частота повторних спроб, коли службу необхідно перезапустити, — це рішення на основі евристики.